#!/bin/rc
# 
# (pseudo-)Multi-Node Regression
#

echo '== UEM Hier Regression =='

#
# Parameters
#
PWD=`{pwd}#`
CMDPATH=$PWD'/..'

GANGLOG=gang2fs.log
EXECLOG=execfs.log
MPIPELOG=mpipefs.log
TESTDIR=$PWD/.test
# metadir is the subdir in which instances will store their logs and .tests
METADIR=.meta

E_MNTPATH=/tmp/testbed/E # execfs mount point
G_MNTPATH=/tmp/testbed/G # gang2fs mount point


NUM=5
CMD='/bin/cat '$TESTDIR'/test'

#
# The test number names are generated and cached for later use.
#
TESTNUM=( 1 )

#
# Enumerate the test numbers
#
fn enum_tests {
	TESTNUM=`{awk 'BEGIN     {
               for (i = 1; i <= '$1'; i++) printf "%d ", i
               exit }'}
	#`# shut up the code coloring bug...
}

#
# Cleanup Previous Instances
#
fn cleanup {
	echo Cleaning up previous runs.
	unmount $E_MNTPATH   > /dev/null >[2] /dev/null
	unmount $G_MNTPATH   > /dev/null >[2] /dev/null
	unmount /n/child  > /dev/null >[2] /dev/null
	unmount /n/master > /dev/null >[2] /dev/null

	rm -f /srv/mpipe*
	rm -f /srv/exec*
	rm -f /srv/gang*
	rm -f /srv/master*
	rm -f /srv/child*

	unmount /proc > /dev/null >[2] /dev/null
	bind '#p' /proc

	kill $O.execcmd | rc
	kill $O.gang2fs | rc
	kill $O.execfs | rc
	kill $O.mpipefs | rc
}

#
# Cleanup the previous runs logs and results
#
fn cleanlogs {
	rm -f $GANGLOG $EXECLOG $MPIPELOG
	rm -rf $G_MNTPATH $E_MNTPATH
	rm -rf $TESTDIR $METADIR
}

#
# Startup execfs 
#
fn startup {

	GHEAD='_'$PARENT
	#GHEAD=''

	if(~ $#* 0) {
		exit usage
	}

	mkdir -p $E_MNTPATH $G_MNTPATH

	echo Starting execfs.
	if(~ $#* 1) {
		$CMDPATH/$O.execfs -s execfs$GHEAD -E $CMDPATH/$O.execcmd -m $E_MNTPATH >[2] $EXECLOG 
	}
	if not {
		$CMDPATH/$O.execfs -D -v $2 -s execfs$GHEAD -E $CMDPATH/$O.execcmd -m $E_MNTPATH >[2] $EXECLOG
	}
	bind -bc '#p' $E_MNTPATH

	echo Starting gang2fs parent $PARENT
	if(~ $#* 1) {
	        echo 'starting gang2fs (n='$1') without debug'
		if (~ $PARENT 0) {
			echo '	master mode'
			$CMDPATH/$O.gang2fs -R 0 -s gang2fs$GHEAD -n $1 -m $G_MNTPATH -E $E_MNTPATH >[2] $GANGLOG
		}
		if not {
			echo '	child mode'
			$CMDPATH/$O.gang2fs -R 1 -s gang2fs$GHEAD -n $1 -p $PARENT -m $G_MNTPATH -E $E_MNTPATH >[2] $GANGLOG
		}
	}
	if not {
	        echo 'starting gang2fs (n='$1') with debug (v='$2')'
		if (~ $PARENT 0) {
			echo '	master mode'
			$CMDPATH/$O.gang2fs -R 0 -s gang2fs$GHEAD -D -v $2 -n $1 -m $G_MNTPATH -E $E_MNTPATH >[2] $GANGLOG
		}
		if not {
			echo '	child mode'
			$CMDPATH/$O.gang2fs -R 1 -s gang2fs$GHEAD -D -v $2 -n $1 -p $PARENT -m $G_MNTPATH -E $E_MNTPATH >[2] $GANGLOG
		}
	}
	mount -ac /srv/gang2fs$GHEAD $G_MNTPATH
}

fn startmp {
	echo Starting mpipefs....
	if(~ $#* 1) {
		$CMDPATH/$O.mpipefs >[2] $MPIPELOG 
	}
	if not {
		$CMDPATH/$O.mpipefs -D -v $2 >[2] $MPIPELOG
	}
}

#
# Setup a testdirp
#
fn testdir {
	mkdir -p $METADIR
	mkdir -p $TESTDIR
}

#
# Setup metanode in its own namespace
#
fn metanode {
	echo 'Starting metanode (head='$1') (debug='$2')'
	rfork n
	mkdir -p $METADIR/$1
	cd $METADIR/$1
	startup $1 $2
	srvfs $1 /
}

fn myexec {
	mypid=`{cat} #`
	echo res $NUM >>[2] error.log # appears to be hanging here
	echo exec $CMD >>[2] error.log
	cat $G_MNTPATH/g$mypid/stdout > $TESTDIR/test1 >>[2] error.log
}

fn basic {
	echo -n 'Basic Test.... '

	# initialize files
	echo Hello Squidboy > $TESTDIR/test
	echo -n > $TESTDIR/test1

	# execute test
	myexec <>$G_MNTPATH/gclone >[1=0]

	# verify results
	echo -n > $TESTDIR/test2
	for(i in $TESTNUM) {
	    cat $TESTDIR/test >> $TESTDIR/test2
	}

	if(! cmp -s $TESTDIR/test2 $TESTDIR/test1) {
		echo FAILED!

		cat error.log

		exit 'stdout: test failed'
	}

	echo Success!
}

# Setup
rfork

cleanup
cleanlogs
testdir

startmp $1

enum_tests $NUM

# startup child node
PARENT=0
@{metanode master $1}
mount /srv/master /n/master

# startup master node
PARENT=master
@{metanode child $1}
mount /srv/child /n/child

bind /n/master/proc /proc
bind /n/master/$E_MNTPATH $E_MNTPATH
bind /n/master/$G_MNTPATH $G_MNTPATH

#bind $E_MNTPATH /n/child/$E_MNTPATH 
#bind $G_MNTPATH /n/child/$G_MNTPATH
mount -ca /srv/execfs_master /n/child/proc

#  mount /srv/child /n/child
#  mount -ca /srv/execfs_master /n/child/proc

#ls /n/child/$G_MNTPATH
#ls $G_MNTPATH
#ls /n/master/proc
#ls /n/child/proc

ls -l /n/child/proc/clone


# tests
basic

# Cleanup
cleanup
