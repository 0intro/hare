#!/bin/rc
# 
# (pseudo-)Multi-Node Regression
#

echo '== UEM Regression =='

#
# Parameters
#
GANGLOG=gangfs.log
EXECLOG=execfs.log
MPIPELOG=mpipefs.log
TESTDIR=.test
# metadir is the subdir in which instances will store their logs and .tests
METADIR=.meta

E_MNTPATH=/tmp/testbed/E # execfs mount point
G_MNTPATH=/tmp/testbed/G # gangfs mount point

#
# Cleanup Previous Instances
#
fn cleanup {
	echo Cleaning up previous runs.
	unmount $E_MNTPATH   > /dev/null >[2] /dev/null
	unmount $G_MNTPATH   > /dev/null >[2] /dev/null
	unmount /n/child  > /dev/null >[2] /dev/null
	unmount /n/master > /dev/null >[2] /dev/null

	rm -rf /tmp/testbed
	rm -f /srv/mpipe
	rm -f /srv/execfs
	rm -f /srv/gangfs
	rm -f /srv/master
	rm -f /srv/child

	unmount /proc > /dev/null >[2] /dev/null
	bind '#p' /proc
}

#
# Startup execfs 
#
fn startup {

	if(~ $#* 0) {
		exit usage
	}

	mkdir -p $E_MNTPATH $G_MNTPATH

	echo Starting execfs.
	if(~ $#* 1) {
		../$O.execfs -s execfs -E ../$O.execcmd -m $E_MNTPATH >[2] $EXECLOG 
	}
	if not {
		../$O.execfs -D -v $2 -s execfs -E ../$O.execcmd -m $E_MNTPATH >[2] $EXECLOG
	}
	bind -b '#p' $E_MNTPATH

	echo Starting gangfs parent $PARENT
	if(~ $#* 1) {
	        echo 'starting gangfs (n='$1') without debug'
		if (~ $PARENT 0) {
			echo '	master mode'
			../$O.gangfs -n $1 -m $G_MNTPATH -E $E_MNTPATH >[2] $GANGLOG
		}
		if not {
			echo '	child mode'
			../$O.gangfs -n $1 -p $PARENT -m $G_MNTPATH -E $E_MNTPATH >[2] $GANGLOG
		}
	}
	if not {
	        echo 'starting gangfs (n='$1') with debug (v='$2')'
		if (~ $PARENT 0) {
			echo '	master mode'
			echo '		O='$O'  G_MNTPATH='$G_MNTPATH'  E_MNTPATH='$E_MNTPATH
			echo '../'$O'.gangfs -D -v '$2' -n '$1' -m '$G_MNTPATH' -E '$E_MNTPATH' >[2] '$GANGLOG
			../$O.gangfs -D -v $2 -n $1 -m $G_MNTPATH -E $E_MNTPATH >[2] $GANGLOG
#			../8.gangfs -D -v 9 -n master -m /tmp/testbed/G -E /tmp/testbed/E  >[2] gangfs.log
		}
		if not {
			echo '	child mode'
			../$O.gangfs -D -v $2 -n $1 -p $PARENT -m $G_MNTPATH -E $E_MNTPATH >[2] $GANGLOG
#			../8.gangfs -D -v 9 -n master -p 0 -m /tmp/testbed/G -E /tmp/testbed/E  >[2] gangfs.log
		}
	}
ls -l  /srv/gangfs
	mount /srv/gangfs $G_MNTPATH
}

fn startmp {
	echo Starting mpipefs....
	if(~ $#* 1) {
		../$O.mpipefs >[2] $MPIPELOG 
	}
	if not {
		../$O.mpipefs -D -v $2 >[2] $MPIPELOG
	}
}

#
# Setup a testdirp
#
fn testdir {
	mkdir -p $METADIR
	mkdir -p $TESTDIR
}

#
# Setup metanode in its own namespace
#
fn metanode {
    echo 'Starting metanode'
	rfork n
	mkdir -p $METADIR/$1
	cd $METADIR/$1
	startup $1 $2
	srvfs $1 /
	ls -l $G_MNTPATH 
	#ls -l $E_MNTPATH
}

fn myexec {
	mypid=`{cat} #`
	echo res 2 >>[2] error.log
	echo exec /bin/cat $TESTDIR/test >>[2] error.log
	cat $G_MNTPATH/g$mypid/stdout > $TESTDIR/test1 >>[2] error.log
}

fn basic {
	echo -n Basic Test....
echo 'G='$G_MNTPATH
ls -l $G_MNTPATH
exit 0

	# initialize files
	echo Hello Squidboy > $TESTDIR/test
	echo > $TESTDIR/test1

	# execute test
	myexec <>$G_MNTPATH/gclone >[1=0]

	# verify results (yes, I'm lazy)
	cat $TESTDIR/test > $TESTDIR/test2
	cat $TESTDIR/test >> $TESTDIR/test2
	if(! cmp -s $TESTDIR/test2 $TESTDIR/test1) {
		echo FAILED!
		exit 'stdout: test failed'
	}

	echo Success!
	# cleanup
	rm -rf $TESTDIR/*
}

# Setup
cleanup
testdir

# startup master node

#startmp 9 9

PARENT=0

#startup master $1


@{metanode master $1}
#metanode master $1
exit 0

mount /srv/master /n/master
PARENT=master

#@{metanode child $1 9}
metanode child $1 9
mount /srv/child /n/child
bind /n/master/proc /proc

basic

# Cleanup
rm -rf $METADIR
rm -rf $TESTDIR
cleanup
