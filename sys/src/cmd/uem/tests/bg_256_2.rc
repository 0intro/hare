#!/bin/rc
# 
# Large scale (256) node fanout with gangfs
#

echo '== Test gangfs across a BlueGene/P node =='

IP=`{echo $ip | sed 's% .*%%'} #`
#if(~ $#NUM 0) NUM=128
if(~ $#NUM 0) NUM=16

TIMEDIR=/n/frontend/home/ericvh/tmp/time
TESTDIR=/tmp/testbed
G_MNTPATH=/proc

#ERRORLOG=$TESTDIR'/error-'$IP'.log'

CMD='/bin/poke -L '$TESTDIR

TIMINGTST=$TESTDIR'/time_'$NUM'.dat'

fn myexec {
	mypid=`{cat} #`

	echo -n 'BEGIN ' > $TIMINGTST
	/bin/poke -N >> $TIMINGTST

	echo -n res $NUM #>>[2] $ERRORLOG

	echo -n 'RES   ' >> $TIMINGTST 
	/bin/poke -N >> $TIMINGTST

	echo -n exec $CMD #>>[2] $ERRORLOG

	echo -n 'EXEC  ' >> $TIMINGTST
	/bin/poke -N >> $TIMINGTST

	#echo -n 'IN    ' >> $TIMINGTST
	#/bin/poke -N >> $TIMINGTST

	cat $G_MNTPATH/g$mypid/stdout > $TESTDIR/test1 #>>[2] $ERRORLOG

	echo -n 'OUT   ' >> $TIMINGTST
	/bin/poke -N >> $TIMINGTST

	# FIXME: end session/termination?
	#   termination handled automatically in the background

	echo -n 'TERM  ' >> $TIMINGTST
	/bin/poke -N >> $TIMINGTST
}

fn basic {
	echo -n 'Basic Test for NUM='$NUM' procs....'

	# initialize files
	echo > $TESTDIR/test1

	# execute test
	myexec <>$G_MNTPATH/gclone >[1=0]

	# verify results -- date returns time time in seconds, so
	# simply varify that the number of procs returned are the same
	# as those requested.
	LEN=`{wc -l $TESTDIR/test1 | sed 's% *[a-zA-Z0-9/.]*$%%'} #`
	echo -n ' (LEN='$LEN') '
	if(! ~ $LEN $NUM) {
		echo FAILED!
		exit 'stdout: test failed'
	}

	echo Success!
	# cleanup
	#rm -rf $TESTDIR/*
}

mkdir -p $TESTDIR $TIMEDIR

basic

echo -n 'DONE ' >> $TIMINGTST
/bin/poke -N >> $TIMINGTST

cp $TIMINGTST $TIMEDIR/

exit 0



#################################################
#################################################
#################################################


#
# Parameters
#

IP=`{echo $ip | sed 's% .*%%'} #`
echo '************************ IP = '$IP

9fs $IP


TIMEDIR=/n/frontend/home/ericvh/tmp/time
TESTDIR=/tmp/testbed
#TESTDIR=/n/frontend/home/ericvh/tmp/.test

ERRORLOG=$TESTDIR'/error-'$IP'.log'

G_MNTPATH=/proc

#CMD='/bin/date'
CMD='/bin/poke -L '$TESTDIR

PWD=`{pwd}#`
echo '************************ PWD = '$PWD

# setup 
#
#NUM=16
#NUM=32 # works

if(~ $#NUM 0) NUM=128

TIMINGTST=$TESTDIR'/time_'$NUM'.dat'

I_MAX=4
J_MAX=4
K_MAX=4

fn cleanup {
	rm -rf $TESTDIR
}


fn enum_tests {
	TESTNUM=`{awk 'BEGIN     {
               for (i = 1; i <= '$1'; i++) printf "%d ", i
               exit }'}
	#`# shut up the code coloring bug...
}

fn enum_srv {
	SRVNUM=`{awk 'BEGIN     {
               for (i=0; i<'$I_MAX'; i++) 
	         for (j=0; j<'$J_MAX'; j++) 
		   for (k=1; k<='$K_MAX'; k++)
		     printf "11.%d.%d.%d ", i, j, k
               exit }'}
	#`# shut up the code coloring bug...
}

#
# Setup a testdirp
#
fn testdir {
	echo 'TESTDIR='$TESTDIR
	mkdir -p $TESTDIR $TIMEDIR
}

fn myexec {
	mypid=`{cat} #`

	echo -n 'BEGIN ' > $TIMINGTST
	/bin/poke -N >> $TIMINGTST

	echo -n res $NUM >>[2] $ERRORLOG

	echo -n 'RES   ' >> $TIMINGTST 
	/bin/poke -N >> $TIMINGTST

	echo -n exec $CMD >>[2] $ERRORLOG

	echo -n 'EXEC  ' >> $TIMINGTST
	/bin/poke -N >> $TIMINGTST

	#echo -n 'IN    ' >> $TIMINGTST
	#/bin/poke -N >> $TIMINGTST

	cat $G_MNTPATH/g$mypid/stdout > $TESTDIR/test1 >>[2] $ERRORLOG

	echo -n 'OUT   ' >> $TIMINGTST
	/bin/poke -N >> $TIMINGTST

	# FIXME: end session/termination?
	#   termination handled automatically in the background

	echo -n 'TERM  ' >> $TIMINGTST
	/bin/poke -N >> $TIMINGTST
}

fn basic {
	echo -n 'Basic Test for NUM='$NUM' procs....'

	# initialize files
	echo > $TESTDIR/test1

	# execute test
	myexec <>$G_MNTPATH/gclone >[1=0]

	# verify results -- date returns time time in seconds, so
	# simply varify that the number of procs returned are the same
	# as those requested.
	LEN=`{wc -l $TESTDIR/test1 | sed 's% *[a-zA-Z0-9/.]*$%%'} #`
	echo -n ' (LEN='$LEN') '
	if(! ~ $LEN $NUM) {
		echo FAILED!
		exit 'stdout: test failed'
	}

	echo Success!
	# cleanup
	#rm -rf $TESTDIR/*
}


# Setup
rfork

#cleanup
testdir

enum_srv

########################################

echo 'Serving CPU Nodes='
for(i in $SRVNUM) {
  echo -n ' '$i' '
  if(! test -e '/srv/'$i)
    9fs $i
  if(! test -e '/n/'$i){
    mount -cb /srv/$i /n/$i
    #bind -ac /proc /n/$i/proc
  }
}
echo ''

########################################

# Tests
basic
echo -n 'DONE ' >> $TIMINGTST
/bin/poke -N >> $TIMINGTST

cp $TIMINGTST $TIMEDIR/

# Cleanup
#cleanup

exit 0

#######################################################################
#######################################################################
#######################################################################
#######################################################################
