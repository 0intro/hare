#!/bin/rc
# 
# Gangfs Regression
#

echo '== Gangfs Regression =='

#
# Parameters
#
O=8.
CMD=../$O

DEBUG='-v 0x00000'
if(~ $#* 0) {
    DEBUG=''
}
if not {
  DEBUG='-v '$1
}
echo 'DEBUG='$DEBUG

#TESTDIR=.test/gangfs
TESTDIR=/tmp/testbed/gangfs

GANGLOG=$TESTDIR/gangfs.log
EXECLOG=$TESTDIR/exec2fs.log
MPIPELOG=$TESTDIR/mpipefs.log
ERRORLOG=$TESTDIR/error.log

E_MNTPATH=$TESTDIR/E

#M_MNTPATH=$TESTDIR/M
M_MNTPATH=$E_MNTPATH

G_MNTPATH=$TESTDIR/G

#
# Cleanup Previous Instances
#
fn cleanup {
	echo Cleaning up previous runs.

	rm -f $E_MNTPATH $M_MNTPATH $G_MNTPATH /tmp/testbed
	rm -rf $TESTDIR
}

fn shutdown {
	echo Shutting down previous runs.

	# FIXME: should there be multiple mpipes?
	unmount /n/mpipetest > /dev/null >[2] /dev/null
	unmount $E_MNTPATH > /dev/null >[2] /dev/null
	unmount $M_MNTPATH > /dev/null >[2] /dev/null

	rm -f /srv/mpipe
	rm -f /srv/exec2fs
	rm -f /n/mpipetest

	unmount /proc > /dev/null >[2] /dev/null
	bind '#p' /proc
}

fn startup_mpipe {
	echo Starting mpipefs....

	$CMD^mpipefs $DEBUG -s mpipe $M_MNTPATH >[2] $MPIPELOG
}

fn startup_exec2fs {
	echo Starting exec2fs.

	$CMD^exec2fs $DEBUG -s exec2fs -E $CMD^execcmd -m $E_MNTPATH -L $TESTDIR -M mpipe -Z $M_MNTPATH >[2] $EXECLOG
}

fn startup_gangfs {
	echo Starting gangfs.

	$CMD^gangfs $DEBUG -m $G_MNTPATH -E $E_MNTPATH -N 4 >[2] $GANGLOG 
}

#
# Startup mpipefs 
#
fn startup {
	startup_mpipe $1
	startup_exec2fs $1
	startup_gangfs $1

	bind -bc .  /$objtype/bin
	bind -bc .. /$objtype/bin
}

#
# Setup a testdirp
#
fn testdir {
	mkdir -p $TESTDIR
	mkdir -p $E_MNTPATH $M_MNTPATH $G_MNTPATH 

}

fn myexec {
	mypid=`{cat} #`
	echo res 5 >>[2] $ERRORLOG
	echo exec /bin/cat $TESTDIR/test >>[2] $ERRORLOG
	cat $G_MNTPATH/g$mypid/stdout > $TESTDIR/test1 >>[2] $ERRORLOG
}

fn myexec2 {
	mypid=`{cat} #`
	echo res 5 >>[2] $ERRORLOG
	echo exec /bin/cat >>[2] $ERRORLOG
	cat $TESTDIR/test > $G_MNTPATH/g$mypid/stdin >>[2] $ERRORLOG
	cat $G_MNTPATH/g$mypid/stdout > $TESTDIR/test1 >>[2] $ERRORLOG
}

fn myexec3 {
	mypid=`{cat} #`
	echo enum >>[2] $ERRORLOG
	echo res 5 >>[2] $ERRORLOG
	echo exec /bin/cat >>[2] $ERRORLOG
	read -n 5 $TESTDIR/test > $G_MNTPATH/g$mypid/stdin >>[2] $ERRORLOG &
	cat $G_MNTPATH/g$mypid/stdout > $TESTDIR/test1 >>[2] $ERRORLOG
}

fn basic {
	echo -n Basic Test....

	# initialize files
	echo Hello Squidboy > $TESTDIR/test
	echo > $TESTDIR/test1

	# execute test
	myexec <>$G_MNTPATH/gclone >[1=0]

	# verify results (yes, I'm lazy)
	cat $TESTDIR/test > $TESTDIR/test2
	cat $TESTDIR/test >> $TESTDIR/test2
	cat $TESTDIR/test >> $TESTDIR/test2
	cat $TESTDIR/test >> $TESTDIR/test2
	cat $TESTDIR/test >> $TESTDIR/test2
	if(! cmp -s $TESTDIR/test2 $TESTDIR/test1) {
		echo FAILED!
		exit 'stdout: test failed'
	}

	echo Success!
}

fn stdin {
	echo -n STDIN Test....

	# initialize files
	echo Hello Squidboy > $TESTDIR/test
	echo > $TESTDIR/test1

	# execute test
	myexec2 <>$G_MNTPATH/gclone >[1=0]

	# verify results (yes, I'm lazy)
	cat $TESTDIR/test > $TESTDIR/test2
	cat $TESTDIR/test >> $TESTDIR/test2
	cat $TESTDIR/test >> $TESTDIR/test2
	cat $TESTDIR/test >> $TESTDIR/test2
	cat $TESTDIR/test >> $TESTDIR/test2
	if(! cmp -s $TESTDIR/test2 $TESTDIR/test1) {
		echo FAILED!
		exit 'stdout: test failed'
	}

	echo Success!
}

fn enum {
	echo -n Enumerated STDIN Test....

	# initialize files
	echo one > $TESTDIR/test
	echo two >> $TESTDIR/test
	echo three >> $TESTDIR/test
	echo four >> $TESTDIR/test
	echo five >> $TESTDIR/test

	echo > $TESTDIR/test1

	# execute test
	myexec3 <>$G_MNTPATH/gclone >[1=0]

	# verify results 
	if(! cmp -s $TESTDIR/test $TESTDIR/test1) {
		echo FAILED!
		exit 'stdout: test failed'
	}

	echo Success!
}

# Setup
rfork

cleanup

testdir
startup $1

# Tests
basic

stdin

enum

shutdown

#cleanup
