
Phase 1 Detail Milestones

A. DONE. Except for a few bits of tty support code, signals, path length issues and a few hacks for OSX, porting changes between Plan 9's rc is trivial. 

B. Mostly done. Multipipe Support(localhost):  I wrote two libraries, libmpipe and libfilt that implement multipipes and filters respectively. Libmpipe provides the following structure:

typedef struct Mpipe Mpipe;
struct Mpipe 
{
	int (*sep)(Mpipe*, char*, int, int*);
	int infd;
	int npipe;
	int *fds;
};

which really just boils down to the fanout part of the filter. 

More interesting is libfilt which provides implementation support for push's filters. Libfilt works like libthread in the sense that it requires the user define a special main function:

int filtmain(Mpipe*, char*, int, int*);

which corresponds to the seperator function of the multipipe. 

The actual implementation of libfilt is relatively involved but the highlights are:
	The filter program expects to be part of the invoking processes fd group. When invoked it expects to have the fds to use in the multipipe passed to it through argv. It then creates a multipipe and connects the passed in fds to the structure. Finally it threadcreates two threads, mpin and mpout which handle fan in and fan out parts of the multipipe.
	fanout is implemented by applying filtmain to the input buffer until the input buffer is empty or can't produce a full record. Any leftovers are memmoved to the beginning of the buffer and we reread at an offset.
	fanin is implemented as npipe number of threads each with a corresponding ioproc reading from the thread. When a buffer is successfully read by the thread the a pointer to the buffer is passed to a mpin(multipipe in) thread which is in charge of separating the buffers(using filtmain) and interleaving them together respecting record boundaries.

I list this as partially done because while the model itself is sound enough, I'm not sure if ioprocs are necessarily the right way to do it on systems like linux. Also I implemented the fan in and fan out together, which is not how I implemented things in rc. Now that most of the structural changes are done in rc(described in the next section) I need to go back and redesign the filter library. 

C. Mostly done. Fan-Out Support. Currently implemented as described in the filter library. I need to change the fanout writing to a channel and multiple writer threads and ioprocs in order to keep a full pipe from blocking all of the writes to the children. 

D. DONE. Fan-In support. As mentioned above, a set of mpreader threads with corresponding ioprocs that send pointers to received buffers over a channel and then the inputs are put together. 

E. In progress. Modified YACC grammar. Changed the rc lexer to notice fan-in(>|) and fan-out(|<) tokens. The lexer also gives us redirection specification(i.e. |<[5]) for free.  The actually grammar is implemented by adding

cmd FANOUT cmd FANIN cmd

as a grammar rule. Then based on this rule we create a pretty complex modified syntax tree(that contains the filter commands and extra pipes). The FANOUT itself generates code that generates a set of pipes(not a multipipe which is entirely user level) and then pushes each of those pipe numbers onto the shell's internal argv stack. The work of actually connecting the pipes to processes is done by the FANIN which creates a process for each pipe in the pipes structure. Finally the tail ends of the pipe are pushed on the argv stack for the fanin filter process.


