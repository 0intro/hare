#!/boot/rc -m /boot/rcmain
#flag x +
#

# try to keep this up to date to keep things straight
#/boot/echo Boot Script Version 0.7 05012010

cputype=power
objtype=$cputype
service=cpu
authid=glenda
rootdir=/root
rootspec=''
rootsrv=boot
job_home=''

beetroot=bgp.rr
#authentication='nvram=/boot/adm/nvram auth/factotum -sfactotum -S'	# -a ...
authentication=''
fsaddr=''
mode=''

#
# Post the read-only filesystem in #s/$beetroot
# and mount it on /boot so the commands in /boot/$cputype/bin
# are available to create the namespace (namespaces like to
# mount #s/boot on / and that should not be the read-only
# filesystem).
# Must set hostowner to be that of the owner of the nvram file
# before paqfs starts otherwise factotum will not be able to
# open it.
#
/boot/echo -n sys > '#c/hostowner'
/boot/paqfs -p -S $beetroot -m /boot -q /boot/$beetroot
cd /boot/$cputype/bin
bind '#c' /dev
bind -b '#æ' /dev
bind '#d' /fd
bind -c '#ec' /env
bind -cb '#e' /env
bind '#p' /proc
bind -c '#s' /srv

#
# Configure the networks.
#
# what are we? 
# figure out what kind of node we are and what the tree ip address is
bind -a '#:' /dev
bind -a '#P' /dev
bind -a '#I' /net

xyzip=(`{cat /dev/xyzip})
if (~ $xyzip(1) '255.255.255'){
	treeip=$xyzip(4)
	cpunode=0
	bind -a '#l0' /net
}
if not {
	treeip=$xyzip(1)
	cpunode=1
	#bind -a '#!' /dev
	bind -a '#∞' /dev
}

#
# I/O node has Ethernet on the outside.
# Everyone has Tree on the inside, loopback.
#
# bad assumption on this check, need to check x,y,z
ip=(`{cat /dev/ioip})
if(~ $cpunode '0'){
	i=`{cat /net/ipifc/clone}
	echo bind gbe /net/ether0 > /net/ipifc/$i/ctl &&
	echo add $ip(1) $ip(2) $ip(3) > /net/ipifc/$i/ctl &&
	echo add 0 0 $ip(4) >>/net/iproute &&
	echo Ether: I am $ip(1)^, default route $ip(4)
}

#
# Tree
#
i=`{cat /net/ipifc/clone}
echo bind tree /dev/vc1 > /net/ipifc/$i/ctl
echo add 11.$treeip $xyzip(2) 11.$xyzip(3) > /net/ipifc/$i/ctl
echo add 12.$treeip $xyzip(2) 12.$xyzip(3) > /net/ipifc/$i/ctl
echo Tree: I am '1[12]'.$treeip^, pset I/O node 11.$xyzip(4)

i=`{cat /net/ipifc/clone}
echo bind loopback /dev/null > /net/ipifc/$i/ctl
echo add 127.0.0.1 255.0.0.0 127.0.0.0 > /net/ipifc/$i/ctl

#
# Torus
#
#
# NOTE: for now, if you are going to setup torus, do it in your lib/profile
#
if(~ $cpunode '1'){
	i=`{cat /net/ipifc/clone}
	echo bind torus /dev/torus > /net/ipifc/$i/ctl
	echo add 10.$xyzip(1) $xyzip(2) 10.$xyzip(3) > /net/ipifc/$i/ctl
}
#
# Set up authentication if necessary.
# Factotum has to be allowed to mount on /mnt here because
# auth_proxy (called by mount) will look for it there.
# Normally, factotum will set '#c/hostowner'; if not, do it
# by hand.
#
if(! ~ $authentication '')
	eval `{echo $authentication}
if(~ `{cat '#c/hostowner'} sys)
	echo -n $authid > '#c/hostowner'

if(! test -d $rootdir/$rootspec/$cputype){
	rootdir=/boot
	rootspec=''
	rootsrv=$beetroot
}

bind -c $rootdir/$rootspec $rootdir
rootsrv='#s/'$rootsrv
#echo root is on $rootdir, root is served from $rootsrv

#
# Finish the namespace setup.
#
bind -a $rootdir /
bind -b -c $rootdir/mnt /mnt
bind $rootdir/$cputype/bin /bin
bind -a $rootdir/rc/bin /bin
mntgen
cd /

#ramfs so we can copy binaries in & have scratch space
ramfs /tmp

#
# Finish environment setup and start services.
#
if(~ $cpunode '1'){
	sysname=cpu-$treeip
}
if not {
	sysname=io-$ip(1)
}
prompt=($sysname'# ' '	') 

#
# start CIOD services
#
if(~ $cpunode '0'){
	#
	# Setup standard out and error fifo pipes
	#
	
	bind '#|' /n/error
	bind '#|' /n/output

	# wait for ethernet to come up
	#echo Waiting for turbines to come up to speed
	sleep 30
	
	aux/listen -i -q -t /bin/service.bgp tcp
	
	# do we only want to send this from one IO node?
	if (~$cpunode '0') {
		#echo Initiating Handshake
		echo 0x01 0x1e 0x0 0 0 0 > /dev/ras
	}
	
	# wait for miniciod to do its thing, need better sync	
	sleep 5
	times=0
	while(! ~ $#times 50 && test ! -e '/env/MODE') {
		#echo -n '.'
		times=($times 1)
		sleep 5
	}
}

# TODO: fix this
fn prefix_log {
	while(x=`{read -n 1})
		echo $sysname : $x
	
	# we want to hold the log file open, so don't die
	while(~ 1 1)
		sleep 1000
}

#
# New FS Backmount Model
#
if(test -e '/env/MODE') {
	#echo Mode detected
	mode=(`{cat /env/MODE})
	if(test -e '/env/BRASIL_ADDR')
		fsaddr=(`{cat /env/BRASIL_ADDR})

	ndb/cs

	if(~ $cpunode '0'){
		# wait for ethernet to come up
		#echo fsaddr $fsaddr
		#echo Atomic batteries to power

		times=0
		while(! ~ $#times 100 && ! ~ $fsaddr '' && ! eval srv -q -c -m $fsaddr brasil /n/brasil) {
			#echo -n '.'
			times=($times 1)
			sleep 5
		}
		#echo done.
	}
	
	# frontend host file system is at n/local under brasil
	bind -c /n/brasil/n/local /n/frontend

	if(test -e '/env/HOME') {
		fshome=(`{cat /env/HOME})
		bind -c /n/frontend^$fshome /n/home
	}
	
	if(test -e '/env/PLAN9_ROOT') {
		plan9root=(`{cat /env/PLAN9_ROOT})
		bind -c /n/frontend^$plan9root /n/root
	}
	
	# redirect IO node log and console
	@{
		rfork
		cat /dev/kmesg /dev/kprint | prefix_log > /n/error/data 
	} &
}
if not {
	#echo No mode detected
}

if(~ $cpunode '1'){
	# wait at least 40 before proceeding to let I/O Node Setup
	#echo Waiting for turbines to come up to speed
	# extended sleep to allow for brasil load on io node
	sleep 60	

	fsaddr='tcp!11.' ^ $xyzip(4) ^ '!564'
	times=0
	while(! ~ $#times 100 && ! ~ $fsaddr '' && ! eval srv -q -c -m $fsaddr ionode /n/io) {
		#echo -n '.'
		times=($times 1)
		sleep 5
	}
		
#	Assuming things worked out
	bind -c /n/io/n/home /n/home
	bind -c /n/io/n/frontend /n/frontend
	bind -c /n/io/n/root /n/root
	bind -a /n/io/env /env
	mode=(`{cat /env/MODE})
	
	# Redirect CPU node console and log
	@{
		rfork
		cat /dev/kmesg /dev/kprint | prefix_log > /n/io/n/error/data
	}&
	
	#echo done.
}

# execute user profile
if(test -e '/n/home/lib/profile') {
	. /n/home/lib/profile
}

#echo starting services
bind /boot/rc/bin/service /bin/service

if(test -d /mnt/factotum)
	aux/listen -i -q tcp
if not
	aux/listen -i -q -t /bin/service tcp
	
fn runit {
	if(test -e $1)
		eval $* 
	if not {
		cmd = /n/frontend^$1
		shift 1
		args = $*
		eval ($cmd $args)
	}
}

fn run_app {
	#flag x +
	if(test -e '/env/job_homedir') 
		job_home=(`{cat /env/job_homedir})
		
	if(test -n $job_home) {
		if(test -e $job_home)
			cd $job_home		
		if not
			cd /n/frontend^$job_home
	}
	if not
		cd /tmp

	if(test -e '/env/job_argenv') 
		job_args=(`{cat /env/job_argenv})	
		
	if(test -n $job_args)
		task=`{echo $job_args}
	if not
		task='echo WARNING: command not detected'

	if(test -n $job_home) {		
		# EVH: took this out for now because result can be unexpected
		# EVH: such as going to cpu's /tmp instead of front-ends
		# EVH: perhaps we need a special switch to override front-end
		# EVH: job_home behavior
		#	
		#if(test -e $job_home)
		#	cd $job_home
		#if not
		cd /n/frontend^$job_home
	}
		
	# encapsulate as a subtask?
	runit $task | prefix_log > /n/io/n/output/data
}

# if someone passed us an application to run, then lets run it
if(~ $cpunode '1'){
	#echo cpu node only bits: $mode
	if(~ $mode nompirun) {
		#echo nompirun mode: starting request application
		@{
			rfork
			run_app
		} &

		wait
		# TODO: perhaps send a RAS message signaling job completetion?

		#echo done	
	}
}
	
# what does this actually do?	
while(echo Hello Squidboy)
	. -i '#d/0'
